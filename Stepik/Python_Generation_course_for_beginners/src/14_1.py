# –≠–∫–∑–∞–º–µ–Ω

# task 1 –ó–≤–µ–∑–¥–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ üå∂Ô∏è

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def draw_triangle():
	for i in range(1, 9):
		print(' ' * (8 - i) + '*' * ((i * 2 ) -1))

# –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
draw_triangle()  # –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏

# task 2 –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏
# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_shipping_cost(quantity):
    return 1000 + (quantity - 1) * 120

# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
n = int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(get_shipping_cost(n))

# task 3 –ë–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç üå∂Ô∏è
from math import factorial
# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def compute_binom(n, k):
    return int(factorial(n) / (factorial(k) * factorial(n - k)))

# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
n = 1
k = 1

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(compute_binom(n, k))

# task 4 –ß–∏—Å–ª–æ —Å–ª–æ–≤–∞–º–∏ üå∂Ô∏è
# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def number_to_words(num):
    lst_1 = ['','–æ–¥–∏–Ω','–¥–≤–∞','—Ç—Ä–∏','—á–µ—Ç—ã—Ä–µ','–ø—è—Ç—å','—à–µ—Å—Ç—å','—Å–µ–º—å','–≤–æ—Å–µ–º—å','–¥–µ–≤—è—Ç—å']
    lst_11 = ['', '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å', '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å', '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å', '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å', '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å', '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å', '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', '–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å']
    lst_10 = ['', '–¥–µ—Å—è—Ç—å', '–¥–≤–∞–¥—Ü–∞—Ç—å', '—Ç—Ä–∏–¥—Ü–∞—Ç—å', '—Å–æ—Ä–æ–∫', '–ø—è—Ç—å–¥–µ—Å—è—Ç', '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç', '—Å–µ–º—å–¥–µ—Å—è—Ç', '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç', '–¥–µ–≤—è–Ω–æ—Å—Ç–æ']
    if n < 10:
        return lst_1[num]
    if 11 <= num <= 19:
        return lst_11[num - 10]
    else:
        d1 = num // 10
        d2 = num % 10
        return lst_10[d1] + ' ' + lst_1[d2]

# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
n = int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(number_to_words(n))

# task 5 –ò—Å–∫–æ–º—ã–π –º–µ—Å—è—Ü
# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_month(language, number):
    lst_ru = ['—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å', '–º–∞–π', '–∏—é–Ω—å', '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å']
    lst_en = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december']
    if language == 'ru':
        return lst_ru[number -1]
    else:
        return lst_en[number -1]


# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
lan = input()
num = int(input())

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(get_month(lan, num))

# task 6 –ú–∞–≥–∏—á–µ—Å–∫–∏–µ –¥–∞—Ç—ã
# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_magic(date):
    lst = date.split('.')
    return int(lst[0]) * int(lst[1]) == int(lst[2]) % 100

# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
date = input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(is_magic(date))

# task 7 –ü–∞–Ω–≥—Ä–∞–º–º—ã
# 1
def is_pangram(text):
	text = text.upper().replace(' ', '')
	lst = [0 for _ in range(91)]
	for i in text:
		lst[ord(i)] = 1
	if sum(lst) == 26:
		return True
	else:
		return False

# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
text = input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(is_pangram(text))

# 2
def is_pangram(text):
    text = text.lower()
    for i in range(ord("a"), ord("z") + 1):
        if chr(i) not in text:
            return False

    return True

# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
text = input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(is_pangram(text))
